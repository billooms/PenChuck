
package billooms.penchuck.rosetteeditor;

import billooms.penchuck.rosettemodel.RosetteImpl;
import billooms.penchuck.rosettemodel.api.Rosette;
import java.awt.Graphics;
import java.awt.Point;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.JPanel;

/**
 * This JPanel displays a rosette owned by the RosetteEditorPanel
 * It listens for changes and repaints as changes are made
 * @author Bill Ooms Copyright (c) 2010 Studio of Bill Ooms all rights reserved
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
public class RosetteDisplayPanel extends JPanel implements PropertyChangeListener {
	private final static double WINDOW_PERCENT = 0.9;		// use 90% of the window for the rosette

	Rosette rosette;

    /** Creates new form RosetteDisplayPanel */
    public RosetteDisplayPanel(Rosette rosette) {
		this.rosette = rosette;

        initComponents();
		
		rosette.addPropertyChangeListener(this);
    }

	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		int dpi = (int) Math.min(WINDOW_PERCENT*this.getWidth()/(2*RosetteImpl.DEFAULT_RADIUS),
								 WINDOW_PERCENT*this.getHeight()/(2*RosetteImpl.DEFAULT_RADIUS));
		Point zeroPix = new Point(this.getWidth()/2, this.getHeight()/2);
		rosette.draw(g, dpi, zeroPix);
	}

	@Override
	public void propertyChange(PropertyChangeEvent evt) {
		this.repaint();
	}


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}

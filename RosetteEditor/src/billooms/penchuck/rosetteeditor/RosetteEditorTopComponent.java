
package billooms.penchuck.rosetteeditor;

import billooms.penchuck.rosettemodel.RosetteImpl;
import billooms.penchuck.rosettemodel.api.Rosette;
import java.awt.BorderLayout;
import java.util.logging.Logger;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.util.lookup.Lookups;

/**
 * TopComponent for editing and displaying a rosette
 * The rosette is owned by the RosetteEditorPanel and is available via lookup.
 * The RosetteEditorPanel changes data owned by the rosette, which in turn fires
 * property changes to the RosetteDisplayPanel.
 * @author Bill Ooms Copyright (c) 2010 Studio of Bill Ooms all rights reserved
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
@ConvertAsProperties(dtd = "-//billooms.penchuck.rosetteeditor//RosetteEditor//EN", autostore = false)
public final class RosetteEditorTopComponent extends TopComponent {

	private static RosetteEditorTopComponent instance;
	/** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
	private static final String PREFERRED_ID = "RosetteEditorTopComponent";

	private RosetteEditorPanel rosetteEditor;
	private RosetteDisplayPanel rosetteDisplay;
	public Rosette rosette = new RosetteImpl();

	public RosetteEditorTopComponent() {
		initComponents();

		rosetteEditor = new RosetteEditorPanel(rosette);
		add(rosetteEditor, BorderLayout.SOUTH);
		rosetteDisplay = new RosetteDisplayPanel(rosette);
		add(rosetteDisplay, BorderLayout.CENTER);
		this.associateLookup(Lookups.singleton(this.rosette));

		setName(NbBundle.getMessage(RosetteEditorTopComponent.class, "CTL_RosetteEditorTopComponent"));
		setToolTipText(NbBundle.getMessage(RosetteEditorTopComponent.class, "HINT_RosetteEditorTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
	/**
	 * Gets default instance. Do not use directly: reserved for *.settings files only,
	 * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
	 * To obtain the singleton instance, use {@link #findInstance}.
	 */
	public static synchronized RosetteEditorTopComponent getDefault() {
		if (instance == null) {
			instance = new RosetteEditorTopComponent();
		}
		return instance;
	}

	/**
	 * Obtain the RosetteEditorTopComponent instance. Never call {@link #getDefault} directly!
	 */
	public static synchronized RosetteEditorTopComponent findInstance() {
		TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
		if (win == null) {
			Logger.getLogger(RosetteEditorTopComponent.class.getName()).warning(
					"Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
			return getDefault();
		}
		if (win instanceof RosetteEditorTopComponent) {
			return (RosetteEditorTopComponent) win;
		}
		Logger.getLogger(RosetteEditorTopComponent.class.getName()).warning(
				"There seem to be multiple components with the '" + PREFERRED_ID
				+ "' ID. That is a potential source of errors and unexpected behavior.");
		return getDefault();
	}

	@Override
	public int getPersistenceType() {
		return TopComponent.PERSISTENCE_ALWAYS;
	}

	@Override
	public void componentOpened() {
		// TODO add custom code on component opening
	}

	@Override
	public void componentClosed() {
		// TODO add custom code on component closing
	}

	void writeProperties(java.util.Properties p) {
		// better to version settings since initial version as advocated at
		// http://wiki.apidesign.org/wiki/PropertyFiles
		p.setProperty("version", "1.0");
		// TODO store your settings
	}

	Object readProperties(java.util.Properties p) {
		if (instance == null) {
			instance = this;
		}
		instance.readPropertiesImpl(p);
		return instance;
	}

	private void readPropertiesImpl(java.util.Properties p) {
		String version = p.getProperty("version");
		// TODO read your settings according to their version
	}

	@Override
	protected String preferredID() {
		return PREFERRED_ID;
	}
}


package billooms.penchuck.penchuckeditor;

import billooms.penchuck.drawables.CurveWidth;
import billooms.penchuck.drawables.Drawable;
import billooms.penchuck.rosettemodel.api.Rosette;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.logging.Logger;
import javax.swing.JColorChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.vecmath.Point2d;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;

/**
 * This TopComponent models a Pen Chuck on a rose engine.
 * The rosette is obtained via lookup from the RosetteEditorTopComponent.
 * @author Bill Ooms Copyright (c) 2010 Studio of Bill Ooms all rights reserved
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
@ConvertAsProperties(dtd = "-//billooms.penchuck.penchuckeditor//PenChuckEditor//EN", autostore = false)
public final class PenChuckEditorTopComponent extends TopComponent {

	private static PenChuckEditorTopComponent instance;
	/** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
	private static final String PREFERRED_ID = "PenChuckEditorTopComponent";

    private final static double POSITION_SCALE = 3.0;
    private final static int POSITION_RANGE = 60;
    private final static double WIDTH_SCALE = 50;
    private final static int WIDTH_RANGE = 50;
	private final static double POSITION_INIT = 1.0;
	private final static int WIDTH_INIT = 1;
	private final static Color DEFAULT_PEN_COLOR = Color.BLACK;

	private double penPosition = POSITION_INIT;
	private int penWidth = WIDTH_INIT;
	private Color penColor = DEFAULT_PEN_COLOR;
	private PlotPanel plotPanel;
	private Rosette rosette;

	public PenChuckEditorTopComponent() {
		initComponents();

		plotPanel = new PlotPanel();
		add(plotPanel, BorderLayout.CENTER);

		Hashtable labelTable = new Hashtable();		// labels for positionSlider
		labelTable.put(-60, new JLabel("3"));
		labelTable.put(-40, new JLabel("2"));
		labelTable.put(-20, new JLabel("1"));
		labelTable.put(0, new JLabel("0"));
		labelTable.put(20, new JLabel("-1"));
		labelTable.put(40, new JLabel("-2"));
		labelTable.put(60, new JLabel("-3"));
		positionSlider.setLabelTable(labelTable);
		positionField.setValue(penPosition);
		widthField.setValue(penWidth);

		setName(NbBundle.getMessage(PenChuckEditorTopComponent.class, "CTL_PenChuckEditorTopComponent"));
		setToolTipText(NbBundle.getMessage(PenChuckEditorTopComponent.class, "HINT_PenChuckEditorTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

		rosette = WindowManager.getDefault().findTopComponent("RosetteEditorTopComponent").getLookup().lookup(Rosette.class);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        positionField = new javax.swing.JFormattedTextField();
        positionSlider = new javax.swing.JSlider();
        jPanel3 = new javax.swing.JPanel();
        widthField = new javax.swing.JFormattedTextField();
        widthSlider = new javax.swing.JSlider();
        clearButton = new javax.swing.JButton();
        undoButton = new javax.swing.JButton();
        drawButton = new javax.swing.JButton();
        colorButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(PenChuckEditorTopComponent.class, "PenChuckEditorTopComponent.jPanel2.border.title"))); // NOI18N

        positionField.setColumns(5);
        positionField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        positionField.setText(org.openide.util.NbBundle.getMessage(PenChuckEditorTopComponent.class, "PenChuckEditorTopComponent.positionField.text")); // NOI18N
        positionField.setToolTipText(org.openide.util.NbBundle.getMessage(PenChuckEditorTopComponent.class, "PenChuckEditorTopComponent.positionField.toolTipText")); // NOI18N
        positionField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                positionFieldchangePosField(evt);
            }
        });

        positionSlider.setMajorTickSpacing(20);
        positionSlider.setMaximum(60);
        positionSlider.setMinimum(-60);
        positionSlider.setMinorTickSpacing(10);
        positionSlider.setPaintLabels(true);
        positionSlider.setPaintTicks(true);
        positionSlider.setToolTipText(org.openide.util.NbBundle.getMessage(PenChuckEditorTopComponent.class, "PenChuckEditorTopComponent.positionSlider.toolTipText")); // NOI18N
        positionSlider.setValue(-20);
        positionSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                changePosSlider(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(positionField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(positionSlider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(positionField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(positionSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(PenChuckEditorTopComponent.class, "PenChuckEditorTopComponent.jPanel3.border.title"))); // NOI18N

        widthField.setColumns(5);
        widthField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        widthField.setText(org.openide.util.NbBundle.getMessage(PenChuckEditorTopComponent.class, "PenChuckEditorTopComponent.widthField.text")); // NOI18N
        widthField.setToolTipText(org.openide.util.NbBundle.getMessage(PenChuckEditorTopComponent.class, "PenChuckEditorTopComponent.widthField.toolTipText")); // NOI18N
        widthField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                widthFieldchangeWidthField(evt);
            }
        });

        widthSlider.setMajorTickSpacing(10);
        widthSlider.setMaximum(50);
        widthSlider.setMinorTickSpacing(5);
        widthSlider.setPaintLabels(true);
        widthSlider.setPaintTicks(true);
        widthSlider.setToolTipText(org.openide.util.NbBundle.getMessage(PenChuckEditorTopComponent.class, "PenChuckEditorTopComponent.widthSlider.toolTipText")); // NOI18N
        widthSlider.setValue(1);
        widthSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                changeWidthSlider(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(widthField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(widthSlider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(widthField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(widthSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(clearButton, org.openide.util.NbBundle.getMessage(PenChuckEditorTopComponent.class, "PenChuckEditorTopComponent.clearButton.text")); // NOI18N
        clearButton.setToolTipText(org.openide.util.NbBundle.getMessage(PenChuckEditorTopComponent.class, "PenChuckEditorTopComponent.clearButton.toolTipText")); // NOI18N
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doClear(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(undoButton, org.openide.util.NbBundle.getMessage(PenChuckEditorTopComponent.class, "PenChuckEditorTopComponent.undoButton.text")); // NOI18N
        undoButton.setToolTipText(org.openide.util.NbBundle.getMessage(PenChuckEditorTopComponent.class, "PenChuckEditorTopComponent.undoButton.toolTipText")); // NOI18N
        undoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doUndo(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(drawButton, org.openide.util.NbBundle.getMessage(PenChuckEditorTopComponent.class, "PenChuckEditorTopComponent.drawButton.text")); // NOI18N
        drawButton.setToolTipText(org.openide.util.NbBundle.getMessage(PenChuckEditorTopComponent.class, "PenChuckEditorTopComponent.drawButton.toolTipText")); // NOI18N
        drawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doDraw(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(colorButton, org.openide.util.NbBundle.getMessage(PenChuckEditorTopComponent.class, "PenChuckEditorTopComponent.colorButton.text")); // NOI18N
        colorButton.setToolTipText(org.openide.util.NbBundle.getMessage(PenChuckEditorTopComponent.class, "PenChuckEditorTopComponent.colorButton.toolTipText")); // NOI18N
        colorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeColor(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, colorButton)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, drawButton)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, undoButton)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, clearButton))
                .addContainerGap(117, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(colorButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(drawButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(undoButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(clearButton))
        );

        add(jPanel1, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

	private void positionFieldchangePosField(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_positionFieldchangePosField
		if (positionField.isFocusOwner()) {
			penPosition = ((Number) positionField.getValue()).doubleValue();
			positionSlider.setValue(-(int)(POSITION_RANGE * penPosition/POSITION_SCALE));
		}
}//GEN-LAST:event_positionFieldchangePosField

	private void changePosSlider(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_changePosSlider
//		if (positionSlider.isFocusOwner()) {
			penPosition = -POSITION_SCALE * positionSlider.getValue() / POSITION_RANGE;
			positionField.setValue(penPosition);		// changing the value will trigger a PropertyChange event
			penPosition = ((Number) positionField.getValue()).doubleValue();
//		}
}//GEN-LAST:event_changePosSlider

	private void widthFieldchangeWidthField(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_widthFieldchangeWidthField
		if (widthField.isFocusOwner()) {
			penWidth = ((Number) widthField.getValue()).intValue();
			widthSlider.setValue(penWidth);
		}
}//GEN-LAST:event_widthFieldchangeWidthField

	private void changeWidthSlider(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_changeWidthSlider
		penWidth = (int)(WIDTH_SCALE * widthSlider.getValue() / WIDTH_RANGE);
		if (penWidth < 1) {
			penWidth = 1;
		}
		widthField.setValue(penWidth);		// changing the value will trigger a PropertyChange event
		penWidth = ((Number) widthField.getValue()).intValue();
}//GEN-LAST:event_changeWidthSlider

	private void doClear(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doClear
		plotPanel.doClear();
}//GEN-LAST:event_doClear

	private void doUndo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doUndo
		plotPanel.doUndo();
}//GEN-LAST:event_doUndo

	private void doDraw(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doDraw
		plotPanel.doDraw();
}//GEN-LAST:event_doDraw

	private void changeColor(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeColor
		Color c = JColorChooser.showDialog(null, "Pen Color", penColor);
		if (c != null) {
			penColor = c;
		}
}//GEN-LAST:event_changeColor

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JButton colorButton;
    private javax.swing.JButton drawButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JFormattedTextField positionField;
    private javax.swing.JSlider positionSlider;
    private javax.swing.JButton undoButton;
    private javax.swing.JFormattedTextField widthField;
    private javax.swing.JSlider widthSlider;
    // End of variables declaration//GEN-END:variables
	/**
	 * Gets default instance. Do not use directly: reserved for *.settings files only,
	 * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
	 * To obtain the singleton instance, use {@link #findInstance}.
	 */
	public static synchronized PenChuckEditorTopComponent getDefault() {
		if (instance == null) {
			instance = new PenChuckEditorTopComponent();
		}
		return instance;
	}

	/**
	 * Obtain the PenChuckEditorTopComponent instance. Never call {@link #getDefault} directly!
	 */
	public static synchronized PenChuckEditorTopComponent findInstance() {
		TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
		if (win == null) {
			Logger.getLogger(PenChuckEditorTopComponent.class.getName()).warning(
					"Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
			return getDefault();
		}
		if (win instanceof PenChuckEditorTopComponent) {
			return (PenChuckEditorTopComponent) win;
		}
		Logger.getLogger(PenChuckEditorTopComponent.class.getName()).warning(
				"There seem to be multiple components with the '" + PREFERRED_ID
				+ "' ID. That is a potential source of errors and unexpected behavior.");
		return getDefault();
	}

	@Override
	public int getPersistenceType() {
		return TopComponent.PERSISTENCE_ALWAYS;
	}

	@Override
	public void componentOpened() {
		// TODO add custom code on component opening
	}

	@Override
	public void componentClosed() {
		// TODO add custom code on component closing
	}

	void writeProperties(java.util.Properties p) {
		// better to version settings since initial version as advocated at
		// http://wiki.apidesign.org/wiki/PropertyFiles
		p.setProperty("version", "1.0");
		// TODO store your settings
	}

	Object readProperties(java.util.Properties p) {
		if (instance == null) {
			instance = this;
		}
		instance.readPropertiesImpl(p);
		return instance;
	}

	private void readPropertiesImpl(java.util.Properties p) {
		String version = p.getProperty("version");
		// TODO read your settings according to their version
	}

	@Override
	protected String preferredID() {
		return PREFERRED_ID;
	}
	
	

    /**
     * Nested class for a panel to display the cut
     */
    public class PlotPanel extends JPanel {
		private final Color BACKGROUND_COLOR = Color.WHITE;
		private final static double WINDOW_PERCENT = 0.9;		// use 90% of the window for the drawing
		private final static double MAX_RADIUS = 3.0;
        
        private ArrayList<Drawable> drawList;		// a list of things to draw

        public PlotPanel() {
            setBackground(BACKGROUND_COLOR);
            drawList = new ArrayList<Drawable>();
        }	// end constructor

        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
			int dpi = (int) Math.min(WINDOW_PERCENT*this.getWidth()/(2*MAX_RADIUS),
									 WINDOW_PERCENT*this.getHeight()/(2*MAX_RADIUS));
			Point zeroPix = new Point(this.getWidth()/2, this.getHeight()/2);
            for (Drawable item : drawList) {		// paint everything in the drawlist
                item.paint(g, dpi, zeroPix);
            }
        }

		/**
		 * Clear the list of things to be drawn
		 */
        private void doClear() {
            drawList.clear();				// clear out the old drawlist
            repaint();
        }

		/**
		 * Remove the last item added to the draw list
		 */
        private void doUndo() {
            if (drawList.size() > 0) {
                drawList.remove(drawList.size() - 1);	// take out the last addition
                repaint();					// Redraw without the curve that has been removed.
            }
        }

		/**
		 * Create the graphics for the pen at the given position
		 * and add it to the list of things to be drawn
		 */
        private void doDraw() {
            int nPts = 360;						// a point every degree
            Point2d[] pts = new Point2d[nPts];	// an array of points to make the drawable line
			int[] wids = new int[nPts];			// an array of widths in pixels
            double dAngle = 360.0 / nPts;
            for (int i = 0; i < nPts; i++) {
                double ampl = rosette.getAmplitudeAt(i * dAngle);
                double x = -(penPosition - ampl) * Math.cos(i * dAngle * Math.PI / 180.0);	// negative: 0 degrees is at 9pm
                double y = (penPosition - ampl) * Math.sin(i * dAngle * Math.PI / 180.0);
                pts[i] = new Point2d(x, y);
				wids[i] = penWidth;
            }
            CurveWidth curve = new CurveWidth(pts, wids, penColor);
            drawList.add(curve);
            repaint();
        }
    }	// end nested class PlotPanel


}
